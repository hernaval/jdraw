
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Club {
  id Int @id @default(autoincrement())
  name String @unique
  athlets Athlet[]
}

model WeightCategory {
  id Int @id @default(autoincrement())
  label String
  sex Sex @default(M)
}

enum Sex {
  M 
  F
}

model Athlet {
  id Int @id @default(autoincrement())
  firstname String
  lastname String 
  weight String 
  photoUrl String
  birthdate String @default("01/01/1970")
  sex String 
  competition String @default("")
   club Club @relation(fields: [clubId], references: [id])
   clubId Int

   matchAsWhite Match[] @relation("whiteAthlet")
   matchAsBlue Match[] @relation("blueAthlet")
   matchAsWinner Match[] @relation("winnerAthlet")
}

model Competition { 
  id Int @id @default(autoincrement())
  name String
  slug String 
  location String 
  startDate String 
  endDate String 
  registrationEndDate String 
  bannerUrl String 
}

model StageConfig {
   id                Int             @id @default(autoincrement())
  configData        Json             

  competition       String 
  weightCategory    String 

  generated         Boolean @default(false)

  // ensure each competition and weight category pair is unique
  @@unique([competition, weightCategory])
  Match Match[] @relation("stageConfig")
}

model Match {
  id               Int  @id @default(autoincrement())
  position         Int
  round Int?
  whiteAthletId    Int 
  blueAthletId     Int? 
  whitePlaceholder String?
  bluePlaceholder String? 
  nextMatchId     Int? 
  winnerAthletId Int? 
  stageConfigId Int 

  whiteAthlet Athlet @relation("whiteAthlet", fields: [whiteAthletId], references: [id])
  blueAthlet Athlet? @relation("blueAthlet", fields: [blueAthletId], references: [id])
  winnerAthlet Athlet? @relation("winnerAthlet", fields: [winnerAthletId], references: [id])
  stageConfig StageConfig @relation("stageConfig",fields: [stageConfigId], references: [id])
}